name: "publish"

on:
  push:
    branches:
      - release
  workflow_dispatch:

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Create latest.json for update checking
        if: matrix.platform == 'windows-latest' # Only run on one platform to avoid conflicts
        shell: bash
        run: |
          # Extract version from package.json
          VERSION=$(node -p "require('./package.json').version")

          # Create latest.json with release information
          cat > latest.json << EOF
          {
            "version": "$VERSION",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/app-v$VERSION/waterer_${VERSION}_x64-setup.exe"
              }
            }
          }
          EOF

          cat latest.json

      - name: Update GitHub Gist with latest release info
        if: matrix.platform == 'windows-latest' # Only run on one platform to avoid conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIST_TOKEN }}
          script: |
            const fs = require('fs');
            const latestJson = fs.readFileSync('latest.json', 'utf8');

            // Update the gist with the latest release information
            // You need to replace 'YOUR_GIST_ID' with your actual gist ID
            const gistId = '${{ secrets.GIST_ID }}';

            await github.rest.gists.update({
              gist_id: gistId,
              files: {
                'latest.json': {
                  content: latestJson
                }
              }
            });
